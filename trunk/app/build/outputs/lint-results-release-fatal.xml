<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.1.2">

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`screen_type`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;screen_type&quot;>phone&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\screen.xml"
            line="3"
            column="13"/>
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values-sw600dp\screen.xml"
            line="3"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`welcome`&quot; is not translated in &quot;da&quot; (Danish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;welcome&quot;>Welcome to Cheat-Database!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`news_text_static`&quot; is not translated in &quot;da&quot; (Danish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;news_text_static&quot;>Thanks so much for using Cheat-Database.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`app_label`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;app_label&quot;>Cheat-Database&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="12"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_item_detail`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_item_detail&quot;>Item Detail&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="13"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`advanced_search`&quot; is not translated in &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;advanced_search&quot;>advanced / full text search&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="48"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`goto_news`&quot; is not translated in &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;goto_news&quot;>News&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="53"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`goto_games_and_cheats`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;goto_games_and_cheats&quot;>Games &amp;amp; Cheats&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="54"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`register_account`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;register_account&quot;>Register New Account&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="82"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`login`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;login&quot;>Login&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="85"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`login_forgot_password`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;login_forgot_password&quot;>Forgot password?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="97"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`err_sd_not_accessible`&quot; is not translated in &quot;da&quot; (Danish), &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;err_sd_not_accessible&quot;>SD card not accessible at the moment.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="111"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`err_saving_to_sd`&quot; is not translated in &quot;da&quot; (Danish), &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;err_saving_to_sd&quot;>Saving to SD card failed.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="112"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`forum`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;forum&quot;>Forum&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="138"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`forum_hint`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;forum_hint&quot;>Your message&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="145"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`submit_cheat_guidelines`&quot; is not translated in &quot;tr&quot; (Turkish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;submit_cheat_guidelines&quot;>Please read our little author guidelines on how to write easy-to-understand cheats.\n\n- Use capital letters for character or object names. Always use a capital letter after a full stop.\n\n- Try not to make long sentences. Short sentences are easier to understand. Try not to use &amp;#8220;then&amp;#8221; to connect sentences either.\n\n- Don\&apos;t use the &amp;#8220;I&amp;#8221; form, i.e. &amp;#8220;I did&amp;#8221; or &amp;#8220;it helped me&amp;#8221; etc. Use the third person for instructions.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="157"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`thanks`&quot; is not translated in &quot;da&quot; (Danish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;thanks&quot;>Thank you!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="158"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pocketchange_rewards_ok`&quot; is not translated in &quot;da&quot; (Danish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pocketchange_rewards_ok&quot;>Cheat submission Pocket Change rewards have been added to your account. Check your new balance from the main screen of this app.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="159"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pocketchange_rewards_nok`&quot; is not translated in &quot;da&quot; (Danish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pocketchange_rewards_nok&quot;>Due to abusing the cheat submission form in the past your account has been disabled for cheat submission Pocket Change rewards. Thanks for your understanding.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="160"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`submit_cheat_consent_text`&quot; is not translated in &quot;tr&quot; (Turkish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;submit_cheat_consent_text&quot;>I hereby agree that my submitted cheat may be proofread and grammatically in order to meet our minimum quality requirement.\n\nBy submitting this cheat you will grant Cheat-Database the right to publish and use your submitted content via App and Website. The author will not gain any financial claims from Cheat-Database.\n\nAll your submitted cheats will be saved to your Cheat-Database member account. Once a cheat has been approved by us you will be notified by email.\n\nIf you want to make any changes to your cheats you can login with your login information on www.cheat-database.com via your computer. There you can add screenshots, edit the text or delete your cheats.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="164"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`submit_cheat_title`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;submit_cheat_title&quot;>Cheat Submission&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="165"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`submit_cheat_agree_terms_conditions`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;submit_cheat_agree_terms_conditions&quot;>Agree with Terms &amp;amp; Conditions&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="166"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`guidelines`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;guidelines&quot;>Guidelines&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="167"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`submit_cheat_error_accept_conditions`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;submit_cheat_error_accept_conditions&quot;>Please accept the Terms &amp;amp; Conditions by clicking the check box above the submit button.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="168"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`meta_info_retrieved`&quot; is not translated in &quot;zh&quot; (Chinese)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;meta_info_retrieved&quot;>Cheat meta info retrieved. Swipe left to view.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="211"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`top_members_top_helping`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;top_members_top_helping&quot;>Top Helping Members&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="215"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`slide_gallery`&quot; is not translated in &quot;da&quot; (Danish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;slide_gallery&quot;>Slide left/right for more images&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="228"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`success`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;success&quot;>Success&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="231"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`successfully_posted_post`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;successfully_posted_post&quot;>Cheat has successfully been posted.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="232"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`error`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;error&quot;>Error&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="233"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`status_update`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;status_update&quot;>Status Update&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="234"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cancelled`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;cancelled&quot;>Cancelled&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="235"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`permission_not_granted`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;permission_not_granted&quot;>Permission not granted&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="236"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`facebook_share`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;facebook_share&quot;>Share on Facebook&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="237"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_activity_main`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_activity_main&quot;>Cheat-Database&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="238"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_settings`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_settings&quot;>Settings&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="239"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_section1`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_section1&quot;>Section 1&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="240"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_section2`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_section2&quot;>Section 2&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="241"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_section3`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_section3&quot;>Section 3&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="242"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`search_game`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;search_game&quot;>Search Game&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="243"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`search_game_hint`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;search_game_hint&quot;>Search for a Game&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="244"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_activity_search_result`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_activity_search_result&quot;>SearchResultActivity&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="245"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`hello_world`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;hello_world&quot;>Hello world!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="246"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`drawer_open`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;drawer_open&quot;>Open navigation drawer&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="247"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`drawer_close`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;drawer_close&quot;>Close navigation drawer&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="248"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_websearch`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_websearch&quot;>Web search&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="249"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`list_games`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;list_games&quot;>Jump to System&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="250"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cheats_count`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;cheats_count&quot;>Number of cheats:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="251"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_cheat_list`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_cheat_list&quot;>Cheats&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="254"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_cheat_detail`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_cheat_detail&quot;>Cheat Detail&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="255"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_cheat_details`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_cheat_details&quot;>Cheat Details&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="256"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`game_search_results_title`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;game_search_results_title&quot;>Search Results for &amp;#8220;%s&amp;#8221;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="257"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`button_dismiss`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;button_dismiss&quot;>Dismiss&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="258"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`contactform_title`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;contactform_title&quot;>Contact Us&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="259"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`contactform_sendmessage`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;contactform_sendmessage&quot;>Send Message&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="260"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`contactform_yourmessage`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;contactform_yourmessage&quot;>Your message&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="261"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`contactform_send_email`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;contactform_send_email&quot;>Or send us an email: info@cheat-database.com&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="262"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`contactform_thanks`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;contactform_thanks&quot;>Thanks for your message. We will reply as soon as possible.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="263"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`close`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;close&quot;>Close&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="264"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sending_message_progress`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;sending_message_progress&quot;>Sending Message&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="265"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`error_value_too_short`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;error_value_too_short&quot;>This value is too short&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="266"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`error_login_required`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;error_login_required&quot;>You need to be logged in to use this feature.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="267"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`error_login_first`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;error_login_first&quot;>Please login first.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="268"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`error_login_to_rate`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;error_login_to_rate&quot;>You have to be logged in to rate cheats.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="269"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rate_cheat_title`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;rate_cheat_title&quot;>Rate cheat &amp;#8220;%s&amp;#8221; here&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="270"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`clear_search_history`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;clear_search_history&quot;>Clear Search History&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="271"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`search_history_cleared`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;search_history_cleared&quot;>Search History cleared.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="272"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`submit_cheat_instructions_activity_title`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;submit_cheat_instructions_activity_title&quot;>For which game would you like to submit a cheat?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="273"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`submit_cheat_instructions_activity_subtitle`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;submit_cheat_instructions_activity_subtitle&quot;>To submit a cheat you first have to search the database for the game you want to submit a cheat for. In the game view you will find a button to submit a cheat for that game. Please note that you have to be logged in as a member in order to be able to submit cheats.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="274"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`already_logged_in`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;already_logged_in&quot;>You are already signed in with %s. Would you like to sign out?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="275"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sign_out`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;sign_out&quot;>Sign Out&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="276"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`search_again`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;search_again&quot;>Search Again&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="277"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`coming_soon`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;coming_soon&quot;>Coming soon!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="278"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`login_to_submit`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;login_to_submit&quot;>Login to submit&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="279"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_article_list`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_article_list&quot;>Articles&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="280"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_article_detail`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_article_detail&quot;>Article Detail&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="281"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_activity_favorites`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_activity_favorites&quot;>FavoritesActivity&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="282"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`recover_login`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;recover_login&quot;>Recovering Login Data&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="283"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`recover_login_success`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;recover_login_success&quot;>Login data successfully recovered. Check your email.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="284"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`err_username_too_short`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;err_username_too_short&quot;>The entered username is too short.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="285"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rate_why_title`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;rate_why_title&quot;>Rate Cheat-Database now!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="286"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rate_us`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;rate_us&quot;>Rate Cheat-Database&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="287"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rate_why_text`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;rate_why_text&quot;>We would be thrilled to get a 5-stars from you. If you give a good rating this means more user downloading Cheat-Database. More users means more cheat submissions. More cheat submissions means more cheats for YOU!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="288"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`system_overview`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;system_overview&quot;>System Overview&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="289"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_favorite_list`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_favorite_list&quot;>Favorites&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="294"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_favorite_detail`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_favorite_detail&quot;>Favorite Detail&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="295"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action&quot;>Perform action&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="297"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`undobar_sample_message`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;undobar_sample_message&quot;>Action performed.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="298"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`undo`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;undo&quot;>Undo&lt;/string>"
        errorLine2="            ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="299"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`remove_favorite_neutral_ok`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;remove_favorite_neutral_ok&quot;>Favorite deleted.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="301"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`remove_favorite_areyousure`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;remove_favorite_areyousure&quot;>Remove this cheat from favorites?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="302"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`confirm`&quot; is not translated in &quot;da&quot; (Danish), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;confirm&quot;>Confirm&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings.xml"
            line="303"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_activity_login`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_activity_login&quot;>Sign in&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="3"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_activity_register`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_activity_register&quot;>Register Account&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_activity_recover`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_activity_recover&quot;>Recover Login Data&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prompt_email`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prompt_email&quot;>Email&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prompt_password`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prompt_password&quot;>Password&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="9"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prompt_username`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prompt_username&quot;>Username&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="10"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prompt_email_or_username`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prompt_email_or_username&quot;>Email or Username&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="11"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_sign_in_register`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_sign_in_register&quot;>&lt;b>Sign in&lt;/b> or register&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="12"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_sign_in_short`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_sign_in_short&quot;>Sign in&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="13"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_register_short`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_register_short&quot;>Register&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="14"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_register_long`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_register_long&quot;>Register new account&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="15"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_forgot_password`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_forgot_password&quot;>Recover lost password&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="16"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_forgot_password_short`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_forgot_password_short&quot;>Recover&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="17"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`login_progress_signing_in`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;login_progress_signing_in&quot;>Signing in&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="18"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`register_progress_registering`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;register_progress_registering&quot;>Registering account&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="19"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`error_invalid_email`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;error_invalid_email&quot;>This email address is invalid&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="20"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`error_invalid_password`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;error_invalid_password&quot;>This password is too short&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="21"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`error_incorrect_password`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;error_incorrect_password&quot;>This password is incorrect&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="22"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`error_field_required`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ph&quot;, &quot;tr&quot; (Turkish), &quot;zh&quot; (Chinese), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;error_field_required&quot;>This field is required&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\Dominik\Workspaces\Android\Cheat-Database\app\src\main\res\values\strings_activity_login.xml"
            line="23"
            column="13"/>
    </issue>

</issues>
